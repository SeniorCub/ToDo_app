just like others create the componets to create, each, all notes just like ```
// eslint-disable-next-line no-unused-vars
import React, { useState, useEffect } from 'react';
import CreateTask from '../../components/tasks/CreateTask';
import AllTasks from '../../components/tasks/AllTasks';

const ListView = () => {

     return (
          <>
               
               
          
     );
};

export default ListView;

```, ```
import { BsStar } from "react-icons/bs"
import ListsAll from "./ListsAll"


const AllTasks = () => {
     
     return (
          


               


                    


                    

All


                    

Active


                    

Pending


                    

Completed


               


               
          


     )
}

export default AllTasks

```,```
import axios from 'axios';
import { useEffect, useState } from 'react';
import toast from 'react-hot-toast';
import { ListEach } from './ListEach';
import { logout } from '../../hooks/logout';

const API_URL = import.meta.env.VITE_API_URL;

const ListsAll = () => {
     const [allTasks, setAllTasks] = useState([]);
     const [loading, setLoading] = useState(true);

     const id = localStorage.getItem('id');
     const token = localStorage.getItem('token');

     const url = `${API_URL}/task/alltasks/${id}`;

     useEffect(() => {
          const fetchTasks = async () => {
               try {
                    const response = await axios.get(url, {
                         headers: {
                              'Content-Type': 'application/json',
                              Authorization: `Bearer ${token}`,
                         },
                    });
                    if (response.status === 200) {
                         setLoading(false);
                         const fetchedTasks = response.data.data;
                         console.log(fetchedTasks);
                         setAllTasks(fetchedTasks);
                    } else {
                         setLoading(false);                    
                         toast.error(response.data.message);
                         logout();
                    }
               } catch (error) {
                    setLoading(false);                    
                    toast.error(error.message);
                    logout();
               }
          };
          fetchTasks();
     }, [token, url, id]);

     return (
          <>
               {loading ? (
                    

Loading tasks...


               ) : (
                    


                         
                    


               )}
          
     );
};

export default ListsAll;

```,```
import PropTypes from 'prop-types';
import { toast } from 'react-hot-toast';
import { BiEdit, BiTrash } from 'react-icons/bi';
import { BsCheckCircle } from 'react-icons/bs';

const API_URL = import.meta.env.VITE_API_URL;

export const ListEach = ({ tasks }) => {
     const deleteTask = async (taskId) => {
          try {
               const token = localStorage.getItem('token');

               const requestOptions = {
                    method: "DELETE",
                    headers: {
                         'Content-Type': 'application/json',
                         Authorization: `Bearer ${token}`,
                    },
               };
               let response = await fetch(`${API_URL}/task/delete/${taskId}`, requestOptions);
               if (response.status === 200) {
                    toast.success("Task deleted successfully.");
                    window.location.reload();
               } else {
                    toast.error("Failed to delete task.");
               }
          } catch (error) {
               console.error("Error deleting task:", error);
               toast.error("Failed to delete task.");
          }
     };

     const completeTask = async (taskId) => {
          try {
               const token = localStorage.getItem('token');

               const requestOptions = {
                    method: "PUT",
                    headers: {
                         'Content-Type': 'application/json',
                         Authorization: `Bearer ${token}`,
                    },
               };
               let response = await fetch(`${API_URL}/task/complete/${taskId}`, requestOptions);
               if (response.status === 200) {
                    toast.success("Task completed successfully.");
                    window.location.reload();
               } else {
                    toast.error("Failed to complete task.");
               }
          } catch (error) {
               console.error("Error completing task:", error);
               toast.error("Failed to complete task.");
          }
     }

     return (
          <div className="mt-2">
               {tasks.length === 0 ? (
                    <p className="text-center text-gray-500">No tasks available.</p>
               ) : (
                    tasks.map((task) => (
                         <div
                              key={task.id}
                              className="bg-white shadow-md rounded-lg p-4 mb-4 relative"
                         >
                              <div className="flex justify-between items-center mb-2">
                                   <div className="flex items-center">
                                        <BsCheckCircle
                                             className={`mr-2 ${task.isComplete === 1
                                                       ? 'text-green-500'
                                                       : 'text-gray-300'
                                                  }`}
                                        />
                                        <span className="text-sm text-gray-500">
                                             {task.time.split(":")[0] + ":" + task.time.split(":")[1]}
                                             {", " + task.date.split("T")[0]}
                                        </span>
                                   </div>
                                   <div className="flex space-x-2">
                                        <button
                                             className="text-blue-500 hover:bg-blue-100 p-1 rounded-full"
                                             onClick={() => {/* Edit functionality */ }}
                                        >
                                             <BiEdit size={20} />
                                        </button>
                                        <button
                                             className="text-red-500 hover:bg-red-100 p-1 rounded-full"
                                             onClick={() => deleteTask(task.id)}
                                        >
                                             <BiTrash size={20} />
                                        </button>
                                   </div>
                              </div>

                              <div
                                   className={`
                                        ${task.isComplete === 1
                                             ? 'line-through text-gray-500'
                                             : 'text-gray-800'
                                        }`
                                   }
                              >
                                   <h2 className="font-bold text-lg mb-1">{task.title}</h2>
                                   <p className="text-sm">
                                        {task.description.substring(0, 200)}
                                        {task.description.length > 200 ? '...' : ''}
                                   </p>
                              </div>
                         </div>
                    ))
               )}
          </div>
     );
};

ListEach.propTypes = {
     tasks: PropTypes.arrayOf(
          PropTypes.shape({
               id: PropTypes.number.isRequired,
               title: PropTypes.string.isRequired,
               description: PropTypes.string,
               time: PropTypes.string,
               date: PropTypes.string,
               isComplete: PropTypes.number,
               isPending: PropTypes.number,
               completed: PropTypes.bool,
          })
     ).isRequired,
};

export default ListEach;
```,```
// eslint-disable-next-line no-unused-vars
import React, { useState } from 'react';
import * as Yup from 'yup';
import { useFormik } from 'formik';
import axios from 'axios';
import { toast } from 'react-hot-toast';
import { CgClose } from 'react-icons/cg';

const API_URL = import.meta.env.VITE_API_URL;

const validationSchema = Yup.object().shape({
     title: Yup.string().required('Title is required'),
     description: Yup.string().required('please enter a Description'),
     date: Yup.date().required('PLease select a due date'),
     time: Yup.string().required('please select a Time'),
     completed: false,
});

const CreateTask = () => {

     const [isOpen, setIsOpened] = useState(false);

     const formik = useFormik({
          initialValues: {
               title: '',
               description: '',
               date: '',
               time: '',
               completed: false,
          },
          validationSchema,
          onSubmit: async (values, { resetForm }) => {
               const url = `${API_URL}/task/create`;
               const id = localStorage.getItem('id');
               const token = localStorage.getItem('token');
               const data = {
                    user_id: id,
                    title: values.title,
                    description: values.description,
                    date: values.date,
                    time: values.time,
               };

               try {
                    const response = await axios.post(url, data, {
                         headers: {
                              'Content-Type': 'application/json',
                              Authorization: `Bearer ${token}`,
                         }
                    });
                    if (response.status === 200) {
                         toast.success(response.data.message);
                         resetForm();
                         setIsOpened(false);
                         window.location.reload();
                    }
               } catch (error) {
                    toast.error(error.message);
               }
          }
     });

     return (
          <>
               <button className="bg-color1 w-16 h-16 flex flex-col justify-center items-center rounded-full text-white fixed right-4 bottom-4 " onClick={() => setIsOpened(!isOpen)}>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#fff" strokeWidth={3} stroke="#fff" className="w-8 h-8">
                         <path fillRule="evenodd" d="M12 3.75a.75.75 0 0 1 .75.75v6.75h6.75a.75.75 0 0 1 0 1.5h-6.75v6.75a.75.75 0 0 1-1.5 0v-6.75H4.5a.75.75 0 0 1 0-1.5h6.75V4.5a.75.75 0 0 1 .75-.75Z" clipRule="evenodd" />
                    </svg>
               </button>

               {isOpen && (
                    <div className="fixed top-28 p-4 bg-color1 shadow-md rounded-lg text-white w-5/6 left-1/2 right-3 transform -translate-x-1/2">
                         <div className='flex justify-between items-center'>
                              <span></span><h1 className="text-center text-2xl font-bold">Create Task</h1> <span className='border rounded-full text-red-500 border-red-500' onClick={() => setIsOpened(false)}><CgClose /></span>
                         </div>
                         <form onSubmit={formik.handleSubmit}>
                              <div className="flex flex-col space-y-4">
                                   <div className="flex items-center sr-only">
                                        <input type="checkbox" name="completed" onChange={formik.handleChange} className="checkbox checkbox-success mr-2" />
                                        <label className="font-semibold">Mark as Completed</label>
                                   </div>
                                   {formik.touched.title && formik.errors.title ? (<p className="text-red-500 text-xs">{formik.errors.title}</p>) : null}
                                   <input type="text" name="title" value={formik.values.title} onChange={formik.handleChange} placeholder="Task title" className="w-full p-2 border bg-white/10 text-black placeholder:text-black rounded-lg" />
                                   {formik.touched.description && formik.errors.description ? (<p className="text-red-500 text-xs">{formik.errors.description}</p>) : null}
                                   <textarea name="description" value={formik.values.description} onChange={formik.handleChange} placeholder="Task description" className="w-full p-2 border bg-white/10 text-black placeholder:text-black rounded-lg" />

                                   <div className="flex space-x-2">
                                        {formik.touched.time && formik.errors.time ? (<p className="text-red-500 text-xs">{formik.errors.time}</p>) : null}
                                        <input type="time" name="time" value={formik.values.time} onChange={formik.handleChange} className="w-1/2 p-2 border bg-white/10 text-black placeholder:text-black rounded-lg" />
                                        {formik.touched.date && formik.errors.date ? (<p className="text-red-500 text-xs">{formik.errors.date}</p>) : null}
                                        <input type="date" name="date" value={formik.values.date} onChange={formik.handleChange} className="w-1/2 p-2 border bg-white/10 text-black placeholder:text-black rounded-lg" />
                                   </div>

                                   <button type="submit" className="w-full py-2 px-4 bg-white text-color1 font-bold rounded-lg"> Add Task </button>
                              </div>
                         </form>
                    </div>
               )}
          </>
     );
};

export default CreateTask;
```